package wackpackr.core;

import java.io.EOFException;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Test;

public class LZWCompressorTest
{
    private final Compressor lzw = new LZWCompressor();
    private final CompressorTester tester = new CompressorTester(lzw);

    private final byte[][] bs = {
            { 4, 9, 32, 9, 97, 60, 94, 46, -89, 107, -119, -34, -95, 120, -72, -96, 80, 72, 50, -122, 20, -10, -124, -64, -32, -15, 24, -125, -119, -22, -30, -124, 65, -99, -113, 7, 108, 21, 66, -20, 117, 57, -99, 47, 103, -78, -123, -41, 24, 118, 61, -98, 18, 55, -78, -67, 67, 1, -127, -63, 98, 112, -87, -116, 54, 6, -12, -112, 43, 99, 46, -57, -92, 65, -31, 56, 117, 66, 29, 79, 71, -83, 6, 31, 17, 117, 76, -34, 49, 87, 44, -38, 126, -20, 115, 57, -99, -17, 71, 18, -68, 0, 0, 0 },
            { 4, 9, 32, 9, 103, -71, -98, -18, 103, -102, -123, -48, -16, 119, -69, -36, 80, 103, 84, 13, 66, -6, 120, 61, -108, 47, 103, -118, -75, 66, -17, -127, 65, 32, -48, -120, 82, -123, -38, -26, 122, -61, -30, 42, 23, 43, -63, -16, -17, -117, 70, 32, 112, 88, 60, 38, 22, -13, 123, 59, -44, 46, 39, -100, 69, -34, -27, -103, -51, -28, -114, 103, -92, 18, 67, 16, 123, 43, -44, 48, 25, 92, 110, 92, -95, 119, 56, -99, -114, 105, 20, 73, -56, -13, 125, 74, 99, 50, -56, -28, 45, -24, -30, 125, 70, -34, 14, 87, 27, -23, -51, 82, -94, -53, 99, -81, 87, 51, -75, -37, 51, -113, 58, -87, -114, 41, -45, -91, -20, -13, -97, -60, 85, -32, 0, 0, 0 },
            { 4, 9, 32, 9, 103, -68, 31, 10, 23, -85, -91, -44, -12, 80, -63, -44, 46, 37, 11, -47, -22, -16, 121, -66, -95, 110, -41, 108, 45, -58, -16, 123, 61, 84, 46, -104, 18, -123, -35, 18, 118, -70, -100, -18, 101, 11, -95, -31, 26, 115, -56, 94, 47, 23, 51, -106, 8, -10, 121, -69, -27, -86, 23, -77, -59, -24, -22, 114, -55, 28, -80, 39, 122, -74, 22, -17, -105, 50, -107, 18, -23, 11, -78, 73, 15, -126, 56, -88, -48, -72, -13, -87, -33, 25, 115, 79, -99, 111, 104, 116, 53, -43, 26, 121, -70, -99, 14, -104, -44, 21, -52, -13, -88, -88, 104, 81, 72, 35, -102, -56, -6, -116, 70, -29, -84, -91, 11, -115, -52, -28, 113, 59, -88, -18, -103, 35, -58, -78, -17, 114, 73, 30, 14, 122, 100, 61, -16, -17, 80, -36, 34, -109, 54, 29, -103, 92, -62, 117, 60, -43, -32, 0, 0, 0 },
            { 4, 9, 32, 9, 100, 60, 30, 14, 85, 11, -71, -32, -13, 119, -70, -99, -18, -123, 106, -123, -94, -30, 123, 59, 85, -22, 22, -61, -91, -60, -11, 80, -66, 29, 78, -41, 106, -123, -12, -16, 123, 60, -44, 46, 119, 83, -51, -23, 24, 122, 57, -98, 79, 103, 51, -67, -56, -26, 80, -68, 28, -22, 23, -85, -90, 96, -27, 113, 62, -108, 46, 55, 51, 1, 66, -60, 120, 59, -98, 47, 103, -85, -103, -25, 13, 118, -68, 28, 80, 71, -77, -58, 126, -26, 118, -47, -89, 76, -25, 19, -67, 66, -15, -88, -72, -91, 49, 54, -45, -103, -23, 13, -121, -60, 98, 116, 8, -116, 18, 62, -10, 80, -69, 29, 78, 71, 98, -122, -101, 52, -101, 40, 86, -84, 85, -91, -46, -23, 62, -71, -35, 111, 74, 25, 107, -95, -60, -24, 115, 57, 98, 108, 39, 44, 18, 83, 43, -106, -53, -41, 106, 22, -125, 105, -88, -43, 99, 52, -43, -32, 0, 0, 0 },
            { 4, 9, 32, 9, 99, -72, -98, -82, -105, 51, -51, 66, -47, 117, 65, 94, 110, 101, 106, -123, -16, -23, 125, 40, 92, -82, -89, 42, -123, -12, -16, 123, 40, 94, -113, 87, 20, 69, -32, -17, 80, -70, -92, 16, 55, 83, -47, 66, -28, 120, 59, 99, -18, -89, 19, -75, 66, -60, 113, 59, -98, 46, 39, -101, -87, 92, -19, 113, 59, -36, -80, -40, 124, 21, -52, -95, -127, -49, -36, -114, -39, 19, -79, 66, -16, 115, -88, 93, 19, -121, -93, -47, -51, 38, 119, 72, -87, 116, -8, 115, -86, 7, 64, -126, 40, 93, -49, 103, -99, 110, 13, 72, 80, -72, -85, 78, -89, 109, 18, 63, 90, 120, 61, 30, 79, 106, -77, -62, -97, 60, -126, 66, -31, -48, 40, 43, -98, 90, -19, -109, 78, 98, -80, -7, 43, -79, -51, 17, 124, 56, -98, -114, -101, 14, 6, 35, 65, -121, 60, 30, 115, 90, -91, -126, -60, -8, -59, 59, 92, -86, -25, -61, -102, 105, -128, 116, -70, -100, -105, -25, -99, -62, 125, 74, -111, 88, 103, 84, 9, 91, -110, 76, -21, -87, 59, 103, -6, 27, 19, -95, -12, -13, -76, -54, 30, 57, -91, 11, -83, -20, -29, -78, 57, -89, -10, 7, -93, -63, -36, -26, -110, 59, -35, 10, 23, 27, -103, -47, 34, 119, -44, -86, -75, 118, 91, 0, 0, 0, 0 }
    };

    @Test
    public void compressionWorks() throws IOException
    {
        for (int i = 0; i < 5; i++)
            Assert.assertTrue(tester.compressesAsExpected(i, bs[i]));
    }

    @Test
    public void decompressionWorks() throws IOException
    {
        for (int i = 0; i < 5; i++)
            Assert.assertTrue(tester.decompressesAsExpected(i, bs[i]));
    }

    @Test
    public void testPerformanceWithText() throws IOException
    {
        Assert.assertTrue(tester.performsWithText());
    }

    @Test
    public void testPerformanceWithImage() throws IOException
    {
        Assert.assertTrue(tester.performsWithImage());
    }

    @Test
    public void testPerformanceWithRandomBytes() throws IOException
    {
        Assert.assertTrue(tester.performsWithRandom());
    }

    @Test(expected = IllegalArgumentException.class)
    public void throwsExceptionIfIncorrectTagInHeader() throws IOException
    {
        byte[] invalid = new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        lzw.decompress(invalid);
    }

    @Test(expected = EOFException.class)
    public void throwsExceptionIfNoEoFMarker() throws IOException
    {
        byte[] invalid = new byte[]{ 4, 9, 32, 9, 97, 60, 94, 46, -89, 107, -119, -34, -95, 120, -72, -96, 80, 72, 50, -122, 20, -10, -124, -64, -32, -15, 24, -125 };
        lzw.decompress(invalid);
    }

    @Test
    public void compressorKnowsItsName()
    {
        Assert.assertEquals("LZW", lzw.getName());
    }
}
